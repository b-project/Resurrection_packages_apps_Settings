package com.acer.incallui;

import android.app.WallpaperManager;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.RenderScript;
import android.renderscript.ScriptIntrinsicBlur;
import android.util.AttributeSet;
import android.util.Log;
import android.view.SurfaceControl;
import android.view.View;
import android.widget.ImageView;
import java.lang.reflect.Array;

public class BlurImageView
  extends ImageView
{
  static int ALPHA = 165;
  private static final boolean DEBUG = true;
  static float DIVIDE = 0.0F;
  static int HIGH = 0;
  static int RADIUS = 3;
  private static final String TAG = "BlurImageView";
  static int WIDHT;
  static WallpaperManager wallpaperManager = null;
  private Bitmap mBitmapIn;
  private Bitmap mBitmapOut;
  public boolean mSr;
  
  static
  {
    HIGH = 1920;
    WIDHT = 1080;
    DIVIDE = 7.5F;
  }
  
  public BlurImageView(Context paramContext)
  {
    super(paramContext);
  }
  
  public BlurImageView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    wallpaperManager = WallpaperManager.getInstance(paramContext);
    paramContext = wallpaperManager.getBitmap();
    this.mBitmapIn = paramContext;
    this.mBitmapOut = paramContext;
    int i = RADIUS;
    float f = DIVIDE;
    i = ALPHA;
    this.mSr = true;
  }
  
  public BlurImageView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
  }
  
  public Bitmap jFastblur(Context paramContext, Bitmap paramBitmap, int paramInt1, float paramFloat, int paramInt2)
  {
    long l1 = System.currentTimeMillis();
    paramContext = Bitmap.createScaledBitmap(paramBitmap, 96, paramBitmap.getHeight() / (paramBitmap.getWidth() / 96), true);
    if (paramInt1 < 1) {
      return null;
    }
    int i10 = paramContext.getWidth();
    int i11 = paramContext.getHeight();
    paramBitmap = new int[i10 * i11];
    Log.e("pix", i10 + " " + i11 + " " + paramBitmap.length);
    paramContext.getPixels(paramBitmap, 0, i10, 0, 0, i10, i11);
    int i15 = i10 - 1;
    int i12 = i11 - 1;
    int i = i10 * i11;
    int i13 = paramInt1 + paramInt1 + 1;
    int[] arrayOfInt1 = new int[i];
    int[] arrayOfInt2 = new int[i];
    int[] arrayOfInt3 = new int[i];
    int[] arrayOfInt4 = new int[Math.max(i10, i11)];
    i = i13 + 1 >> 1;
    int j = i * i;
    int[] arrayOfInt5 = new int[j * 256];
    i = 0;
    while (i < j * 256)
    {
      arrayOfInt5[i] = (i / j);
      i += 1;
    }
    int i7 = 0;
    int i5 = 0;
    int[][] arrayOfInt = (int[][])Array.newInstance(Integer.TYPE, new int[] { i13, 3 });
    int i14 = paramInt1 + 1;
    int i6 = 0;
    int i1;
    int i3;
    int i4;
    int n;
    int i2;
    int k;
    int m;
    int i8;
    int i9;
    int[] arrayOfInt6;
    int i17;
    int i16;
    while (i6 < i11)
    {
      i1 = 0;
      i3 = 0;
      i4 = 0;
      j = 0;
      n = 0;
      i2 = 0;
      i = 0;
      k = 0;
      m = 0;
      i8 = -paramInt1;
      if (i8 <= paramInt1)
      {
        i9 = paramBitmap[(Math.min(i15, Math.max(i8, 0)) + i7)];
        arrayOfInt6 = arrayOfInt[(i8 + paramInt1)];
        arrayOfInt6[0] = ((0xFF0000 & i9) >> 16);
        arrayOfInt6[1] = ((0xFF00 & i9) >> 8);
        arrayOfInt6[2] = (i9 & 0xFF);
        i9 = i14 - Math.abs(i8);
        i4 += arrayOfInt6[0] * i9;
        i3 += arrayOfInt6[1] * i9;
        i1 += arrayOfInt6[2] * i9;
        if (i8 > 0)
        {
          m += arrayOfInt6[0];
          k += arrayOfInt6[1];
          i += arrayOfInt6[2];
        }
        for (;;)
        {
          i8 += 1;
          break;
          i2 += arrayOfInt6[0];
          n += arrayOfInt6[1];
          j += arrayOfInt6[2];
        }
      }
      i9 = paramInt1;
      i8 = 0;
      while (i8 < i10)
      {
        arrayOfInt1[i7] = arrayOfInt5[i4];
        arrayOfInt2[i7] = arrayOfInt5[i3];
        arrayOfInt3[i7] = arrayOfInt5[i1];
        arrayOfInt6 = arrayOfInt[((i9 - paramInt1 + i13) % i13)];
        int i18 = arrayOfInt6[0];
        i17 = arrayOfInt6[1];
        i16 = arrayOfInt6[2];
        if (i6 == 0) {
          arrayOfInt4[i8] = Math.min(i8 + paramInt1 + 1, i15);
        }
        int i19 = paramBitmap[(arrayOfInt4[i8] + i5)];
        arrayOfInt6[0] = ((0xFF0000 & i19) >> 16);
        arrayOfInt6[1] = ((0xFF00 & i19) >> 8);
        arrayOfInt6[2] = (i19 & 0xFF);
        m += arrayOfInt6[0];
        k += arrayOfInt6[1];
        i += arrayOfInt6[2];
        i4 = i4 - i2 + m;
        i3 = i3 - n + k;
        i1 = i1 - j + i;
        i9 = (i9 + 1) % i13;
        arrayOfInt6 = arrayOfInt[(i9 % i13)];
        i2 = i2 - i18 + arrayOfInt6[0];
        n = n - i17 + arrayOfInt6[1];
        j = j - i16 + arrayOfInt6[2];
        m -= arrayOfInt6[0];
        k -= arrayOfInt6[1];
        i -= arrayOfInt6[2];
        i7 += 1;
        i8 += 1;
      }
      i5 += i10;
      i6 += 1;
    }
    i = 0;
    while (i < i10)
    {
      i2 = 0;
      i4 = 0;
      i5 = 0;
      k = 0;
      i1 = 0;
      i3 = 0;
      j = 0;
      m = 0;
      n = 0;
      i6 = -paramInt1 * i10;
      i7 = -paramInt1;
      if (i7 <= paramInt1)
      {
        i8 = Math.max(0, i6) + i;
        arrayOfInt6 = arrayOfInt[(i7 + paramInt1)];
        arrayOfInt6[0] = arrayOfInt1[i8];
        arrayOfInt6[1] = arrayOfInt2[i8];
        arrayOfInt6[2] = arrayOfInt3[i8];
        i9 = i14 - Math.abs(i7);
        i5 += arrayOfInt1[i8] * i9;
        i4 += arrayOfInt2[i8] * i9;
        i2 += arrayOfInt3[i8] * i9;
        if (i7 > 0)
        {
          n += arrayOfInt6[0];
          m += arrayOfInt6[1];
          j += arrayOfInt6[2];
        }
        for (;;)
        {
          i8 = i6;
          if (i7 < i12) {
            i8 = i6 + i10;
          }
          i7 += 1;
          i6 = i8;
          break;
          i3 += arrayOfInt6[0];
          i1 += arrayOfInt6[1];
          k += arrayOfInt6[2];
        }
      }
      i7 = i;
      i8 = paramInt1;
      i6 = 0;
      while (i6 < i11)
      {
        paramBitmap[i7] = (0xFF000000 & paramBitmap[i7] | arrayOfInt5[i5] << 16 | arrayOfInt5[i4] << 8 | arrayOfInt5[i2]);
        arrayOfInt6 = arrayOfInt[((i8 - paramInt1 + i13) % i13)];
        i16 = arrayOfInt6[0];
        i15 = arrayOfInt6[1];
        i9 = arrayOfInt6[2];
        if (i == 0) {
          arrayOfInt4[i6] = (Math.min(i6 + i14, i12) * i10);
        }
        i17 = i + arrayOfInt4[i6];
        arrayOfInt6[0] = arrayOfInt1[i17];
        arrayOfInt6[1] = arrayOfInt2[i17];
        arrayOfInt6[2] = arrayOfInt3[i17];
        n += arrayOfInt6[0];
        m += arrayOfInt6[1];
        j += arrayOfInt6[2];
        i5 = i5 - i3 + n;
        i4 = i4 - i1 + m;
        i2 = i2 - k + j;
        i8 = (i8 + 1) % i13;
        arrayOfInt6 = arrayOfInt[i8];
        i3 = i3 - i16 + arrayOfInt6[0];
        i1 = i1 - i15 + arrayOfInt6[1];
        k = k - i9 + arrayOfInt6[2];
        n -= arrayOfInt6[0];
        m -= arrayOfInt6[1];
        j -= arrayOfInt6[2];
        i7 += i10;
        i6 += 1;
      }
      i += 1;
    }
    Log.d("pix", i10 + " " + i11 + " " + paramBitmap.length);
    paramContext.setPixels(paramBitmap, 0, i10, 0, 0, i10, i11);
    new Canvas(paramContext).drawARGB(paramInt2, 0, 0, 0);
    long l2 = System.currentTimeMillis();
    Log.d("BlurImageView", "jFastblur take " + String.valueOf(l2 - l1) + " millis sec.");
    return paramContext;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if (!this.mSr)
    {
      int i = HIGH;
      paramCanvas = SurfaceControl.screenshot(WIDHT, i);
      paramCanvas = jFastblur(this.mContext, paramCanvas, RADIUS, DIVIDE, ALPHA);
      this.mBitmapOut = paramCanvas;
      setImageBitmap(paramCanvas);
      this.mSr = true;
    }
  }
  
  protected void onVisibilityChanged(View paramView, int paramInt)
  {
    super.onVisibilityChanged(paramView, paramInt);
    if (paramInt == 0) {
      this.mSr = false;
    }
  }
  
  public Bitmap renderScriptBlur(Bitmap paramBitmap, int paramInt1, float paramFloat, int paramInt2)
  {
    Rect localRect1 = new Rect();
    Rect localRect2 = new Rect();
    long l1 = System.currentTimeMillis();
    paramBitmap = paramBitmap.copy(paramBitmap.getConfig(), true);
    paramBitmap = Bitmap.createScaledBitmap(paramBitmap, 96, paramBitmap.getHeight() / (paramBitmap.getWidth() / 96), true);
    Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth() + paramInt1 * 2, paramBitmap.getHeight() + paramInt1 * 2, paramBitmap.getConfig());
    localRect1.top = 0;
    localRect1.left = 0;
    localRect1.right = paramBitmap.getWidth();
    localRect1.bottom = paramBitmap.getHeight();
    localRect2.top = paramInt1;
    localRect2.left = paramInt1;
    localRect2.right = paramBitmap.getWidth();
    localRect2.bottom = paramBitmap.getHeight();
    Canvas localCanvas = new Canvas(localBitmap);
    Paint localPaint = new Paint();
    localPaint.setStyle(Paint.Style.FILL_AND_STROKE);
    localPaint.setAntiAlias(true);
    localCanvas.drawARGB(255, 255, 255, 255);
    localCanvas.drawBitmap(paramBitmap, localRect1, localRect2, localPaint);
    RenderScript localRenderScript = RenderScript.create(getContext());
    Allocation localAllocation1 = Allocation.createFromBitmap(localRenderScript, localBitmap);
    Allocation localAllocation2 = Allocation.createFromBitmap(localRenderScript, localBitmap);
    ScriptIntrinsicBlur localScriptIntrinsicBlur = ScriptIntrinsicBlur.create(localRenderScript, Element.U8_4(localRenderScript));
    localScriptIntrinsicBlur.setRadius(paramInt1);
    localScriptIntrinsicBlur.setInput(localAllocation1);
    localScriptIntrinsicBlur.forEach(localAllocation2);
    localAllocation2.copyTo(localBitmap);
    localRenderScript.destroy();
    localCanvas.setBitmap(paramBitmap);
    localCanvas.drawBitmap(localBitmap, localRect2, localRect1, localPaint);
    localCanvas.drawARGB(paramInt2, 0, 0, 0);
    long l2 = System.currentTimeMillis();
    Log.d("BlurImageView", "setBlurImageBitmap take " + String.valueOf(l2 - l1) + " millis sec.");
    return paramBitmap;
  }
  
  public void setAlpha(int paramInt)
  {
    ALPHA = paramInt;
  }
  
  public void setBlurImageBitmap(Bitmap paramBitmap)
  {
    setBlurImageBitmap(paramBitmap, RADIUS, DIVIDE, ALPHA);
  }
  
  public void setBlurImageBitmap(Bitmap paramBitmap, int paramInt1, float paramFloat, int paramInt2)
  {
    jFastblur(this.mContext, paramBitmap, paramInt1, paramFloat, paramInt2);
  }
  
  public void setBlurImageDrawable(Drawable paramDrawable)
  {
    setBlurImageBitmap(((BitmapDrawable)paramDrawable).getBitmap(), RADIUS, DIVIDE, ALPHA);
  }
  
  public void setBlurImageDrawable(Drawable paramDrawable, int paramInt1, float paramFloat, int paramInt2)
  {
    Log.d("BlurImageView", "setBlurImageDrawable");
    setBlurImageBitmap(((BitmapDrawable)paramDrawable).getBitmap(), paramInt1, paramFloat, paramInt2);
  }
  
  public void setWallpaperAsImage()
  {
    Log.d("BlurImageView", "setWallpaperAsImage");
    setBlurImageDrawable(wallpaperManager.getDrawable(), RADIUS, DIVIDE, ALPHA);
  }
}
